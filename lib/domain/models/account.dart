import "package:freezed_annotation/freezed_annotation.dart";
import "package:mony_app/app/app.dart";
import "package:sealed_currencies/sealed_currencies.dart";

part "account.freezed.dart";

enum EAccountType implements IDescriptable {
  debit(value: "debit"),
  credit(value: "credit"),
  cash(value: "cash"),
  savings(value: "savings"),
  investment(value: "investment");

  final String value;

  const EAccountType({required this.value});

  static EAccountType get defaultValue => EAccountType.debit;

  static EAccountType from(String type) {
    return EAccountType.values.where((e) => e.value == type).firstOrNull ??
        defaultValue;
  }

  @override
  String get description {
    return switch (this) {
      EAccountType.debit => "–î–µ–±–µ—Ç–æ–≤—ã–π —Å—á–µ—Ç",
      EAccountType.credit => "–ö—Ä–µ–¥–∏—Ç–Ω—ã–π —Å—á–µ—Ç",
      EAccountType.cash => "–ù–∞–ª–∏—á–Ω—ã–µ",
      EAccountType.savings => "–í–∫–ª–∞–¥, –Ω–∞–∫–æ–ø–∏—Ç–µ–ª—å–Ω—ã–π —Å—á–µ—Ç",
      EAccountType.investment => "–ò–Ω–≤–µ—Å—Ç–∏—Ü–∏–æ–Ω–Ω—ã–π —Å—á–µ—Ç",
    };
  }

  String get icon {
    return switch (this) {
      EAccountType.debit => "üí≥",
      EAccountType.credit => "üõü",
      EAccountType.cash => "üíµ",
      EAccountType.savings => "üê∑",
      EAccountType.investment => "ü¶Ñ",
    };
  }
}

// TODO: –ø–µ—Ä–µ–≤–æ–¥ —Å –æ–¥–Ω–æ–≥–æ —Å—á–µ—Ç–∞ –Ω–∞ –¥—Ä—É–≥–æ–π, —á—Ç–æ –ø–æ-—Å—É—Ç–∏ –º–µ–Ω—è–µ—Ç –∏–∑–Ω–∞—á–∞–ª—å–Ω—ã–µ —Å—É–º–º—ã
// –Ω–∞ —Å—á–µ—Ç–∞—Ö –±–µ–∑ —Å–æ–∑–¥–∞–Ω–∏—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π –∏/–∏–ª–∏ –ø—Ä–æ—Å—Ç–æ —Å–º–µ–Ω–∞ –∞–∫–∫–∞—É–Ω—Ç–∞
@freezed
class AccountModel with _$AccountModel {
  const factory AccountModel({
    required String id,
    required DateTime created,
    required DateTime updated,
    required String title,
    required EAccountType type,
    required FiatCurrency currency,
    required EColorName colorName,
    required double balance,
  }) = _AccountModel;
}

extension AccountModelEx on List<AccountModel> {
  List<AccountModel> merge(List<AccountModel> other) {
    return List<AccountModel>.from(
        where((e) => !other.any((i) => e.id == i.id)),
      )
      ..addAll(other)
      ..sort((a, b) => a.created.compareTo(b.created));
  }
}
